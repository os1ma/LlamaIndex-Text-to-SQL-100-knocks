- "question": |-
    ---
    > S-001: レシート明細データ（receipt）から全項目の先頭10件を表示し、どのようなデータを保有しているか目視で確認せよ。
  "answer": |-
    SELECT * FROM receipt LIMIT 10;
- "question": |-
    ---
    > S-002: レシート明細データ（receipt）から売上年月日（sales_ymd）、顧客ID（customer_id）、商品コード（product_cd）、売上金額（amount）の順に列を指定し、10件表示せよ。
  "answer": |-
    SELECT sales_ymd, customer_id, product_cd, amount
    FROM receipt
    LIMIT 10;
- "question": |-
    ---
    > S-003: レシート明細データ（receipt）から売上年月日（sales_ymd）、顧客ID（customer_id）、商品コード（product_cd）、売上金額（amount）の順に列を指定し、10件表示せよ。ただし、sales_ymdsales_dateに項目名を変更しながら抽出すること。
  "answer": |-
    SELECT sales_ymd AS sales_date, customer_id, product_cd, amount
    FROM receipt
    LIMIT 10;
- "question": |-
    ---
    > S-004: レシート明細データ（receipt）から売上日（sales_ymd）、顧客ID（customer_id）、商品コード（product_cd）、売上金額（amount）の順に列を指定し、以下の条件を満たすデータを抽出せよ。
    > - 顧客ID（customer_id）が"CS018205000001"
  "answer": |-
    SELECT sales_ymd, customer_id, product_cd, amount
    FROM receipt
    WHERE customer_id = 'CS018205000001'
    ORDER BY sales_ymd;
- "question": |-
    ---
    > S-005: レシート明細データ（receipt）から売上日（sales_ymd）、顧客ID（customer_id）、商品コード（product_cd）、売上金額（amount）の順に列を指定し、以下の全ての条件を満たすデータを抽出せよ。
    > - 顧客ID（customer_id）が"CS018205000001"
    > - 売上金額（amount）が1,000以上
  "answer": |-
    SELECT sales_ymd, customer_id, product_cd, amount
    FROM receipt
    WHERE customer_id = 'CS018205000001' AND amount >= 1000
    ORDER BY sales_ymd;
- "question": |-
    ---
    > S-006: レシート明細データ（receipt）から売上日（sales_ymd）、顧客ID（customer_id）、商品コード（product_cd）、売上数量（quantity）、売上金額（amount）の順に列を指定し、以下の全ての条件を満たすデータを抽出せよ。
    > - 顧客ID（customer_id）が"CS018205000001"
    > - 売上金額（amount）が1,000以上または売上数量（quantity）が5以上
  "answer": |-
    SELECT sales_ymd, customer_id, product_cd, quantity, amount
    FROM receipt
    WHERE customer_id = 'CS018205000001' AND (amount >= 1000 OR quantity >= 5)
    ORDER BY sales_ymd;
- "question": |-
    ---
    > S-007: レシート明細データ（receipt）から売上日（sales_ymd）、顧客ID（customer_id）、商品コード（product_cd）、売上金額（amount）の順に列を指定し、以下の全ての条件を満たすデータを抽出せよ。
    > - 顧客ID（customer_id）が"CS018205000001"
    > - 売上金額（amount）が1,000以上2,000以下
  "answer": |-
    SELECT sales_ymd, customer_id, product_cd, amount
    FROM receipt
    WHERE customer_id = 'CS018205000001' AND amount >= 1000 AND amount <= 2000
    ORDER BY sales_ymd;
- "question": |-
    ---
    > S-008: レシート明細データ（receipt）から売上日（sales_ymd）、顧客ID（customer_id）、商品コード（product_cd）、売上金額（amount）の順に列を指定し、以下の全ての条件を満たすデータを抽出せよ。
    > - 顧客ID（customer_id）が"CS018205000001"
    > - 商品コード（product_cd）が"P071401019"以外
  "answer": |-
    SELECT sales_ymd, customer_id, product_cd, amount
    FROM receipt
    WHERE customer_id = 'CS018205000001' AND product_cd != 'P071401019'
    ORDER BY sales_ymd;
- "question": |-
    ---
    > S-009: 以下の処理において、出力結果を変えずにORをANDに書き換えよ。
    >
    > `SELECT * FROM store WHERE NOT (prefecture_cd = '13' OR floor_area > 900)`
  "answer": |-
    SELECT * FROM store WHERE NOT (prefecture_cd = '13' AND floor_area > 900)
- "question": |-
    ---
    > S-010: 店舗データ（store）から、店舗コード（store_cd）が"S14"で始まるものだけ全項目抽出し、10件表示せよ。
  "answer": |-
    SELECT * FROM store WHERE store_cd LIKE 'S14%' LIMIT 10;
- "question": |-
    ---
    > S-011: 顧客データ（customer）から顧客ID（customer_id）の末尾が1のものだけ全項目抽出し、10件表示せよ。
  "answer": |-
    SELECT * FROM customer WHERE customer_id LIKE '%1' LIMIT 10;
- "question": |-
    ---
    > S-012: 店舗データ（store）から、住所 (address) に"横浜市"が含まれるものだけ全項目表示せよ。
  "answer": |-
    SELECT * FROM store WHERE address LIKE '%横浜市%'
- "question": |-
    ---
    > S-013: 顧客データ（customer）から、ステータスコード（status_cd）の先頭がアルファベットのA〜Fで始まるデータを全項目抽出し、10件表示せよ。
  "answer": |-
    SELECT *
    FROM customer
    WHERE status_cd LIKE 'A%' OR status_cd LIKE 'B%' OR status_cd LIKE 'C%' OR status_cd LIKE 'D%' OR status_cd LIKE 'E%' OR status_cd LIKE 'F%'
    LIMIT 10;
- "question": |-
    ---
    > S-014: 顧客データ（customer）から、ステータスコード（status_cd）の末尾が数字の1〜9で終わるデータを全項目抽出し、10件表示せよ。
  "answer": |-
    SELECT *
    FROM customer
    WHERE status_cd LIKE '%[1-9]'
    LIMIT 10;
- "question": |-
    ---
    > S-015: 顧客データ（customer）から、ステータスコード（status_cd）の先頭がアルファベットのA〜Fで始まり、末尾が数字の1〜9で終わるデータを全項目抽出し、10件表示せよ。
  "answer": |-
    SELECT *
    FROM customer
    WHERE status_cd LIKE '[A-F]%[1-9]'
    LIMIT 10;
- "question": |-
    ---
    > S-016: 店舗データ（store）から、電話番号（tel_no）が3桁-3桁-4桁のデータを全項目表示せよ。
  "answer": |-
    SELECT * FROM store WHERE tel_no LIKE '___-___-____'
- "question": |-
    ---
    > S-017: 顧客データ（customer）を生年月日（birth_day）で高齢順にソートし、先頭から全項目を10件表示せよ。
  "answer": |-
    SELECT * FROM customer ORDER BY birth_day ASC LIMIT 10
- "question": |-
    ---
    > S-018: 顧客データ（customer）を生年月日（birth_day）で若い順にソートし、先頭から全項目を10件表示せよ。
  "answer": |-
    SELECT * FROM customer ORDER BY birth_day ASC LIMIT 10;
- "question": |-
    ---
    > S-019: レシート明細データ（receipt）に対し、1件あたりの売上金額（amount）が高い順にランクを付与し、先頭から10件表示せよ。項目は顧客ID（customer_id）、売上金額（amount）、付与したランクを表示させること。なお、売上金額（amount）が等しい場合は同一順位を付与するものとする。
  "answer": |-
    SELECT customer_id, amount, DENSE_RANK() OVER (ORDER BY amount DESC) as rank
    FROM receipt
    ORDER BY rank ASC
    LIMIT 10
- "question": |-
    ---
    > S-020: レシート明細データ（receipt）に対し、1件あたりの売上金額（amount）が高い順にランクを付与し、先頭から10件表示せよ。項目は顧客ID（customer_id）、売上金額（amount）、付与したランクを表示させること。なお、売上金額（amount）が等しい場合でも別順位を付与すること。
  "answer": |-
    SELECT customer_id, amount, DENSE_RANK() OVER (ORDER BY amount DESC) as rank
    FROM receipt
    ORDER BY amount DESC, customer_id
    LIMIT 10;
- "question": |-
    ---
    > S-021: レシート明細データ（receipt）に対し、件数をカウントせよ。
  "answer": |-
    SELECT COUNT(*) FROM receipt;
- "question": |-
    ---
    > S-022: レシート明細データ（receipt）の顧客ID（customer_id）に対し、ユニーク件数をカウントせよ。
  "answer": |-
    SELECT COUNT(DISTINCT customer_id) FROM receipt;
- "question": |-
    ---
    > S-023: レシート明細データ（receipt）に対し、店舗コード（store_cd）ごとに売上金額（amount）と売上数量（quantity）を合計せよ。
  "answer": |-
    SELECT store_cd, SUM(amount) as total_sales, SUM(quantity) as total_quantity
    FROM receipt
    GROUP BY store_cd
- "question": |-
    ---
    > S-024: レシート明細データ（receipt）に対し、顧客ID（customer_id）ごとに最も新しい売上年月日（sales_ymd）を求め、10件表示せよ。
  "answer": |-
    SELECT customer_id, MAX(sales_ymd) AS latest_sales_ymd
    FROM receipt
    GROUP BY customer_id
    ORDER BY latest_sales_ymd DESC
    LIMIT 10;
- "question": |-
    ---
    > S-025: レシート明細データ（receipt）に対し、顧客ID（customer_id）ごとに最も古い売上年月日（sales_ymd）を求め、10件表示せよ。
  "answer": |-
    SELECT customer_id, MIN(sales_ymd) AS oldest_sales_ymd
    FROM receipt
    GROUP BY customer_id
    ORDER BY oldest_sales_ymd
    LIMIT 10;
- "question": |-
    ---
    > S-026: レシート明細データ（receipt）に対し、顧客ID（customer_id）ごとに最も新しい売上年月日（sales_ymd）と古い売上年月日を求め、両者が異なるデータを10件表示せよ。
  "answer": |-
    SELECT customer_id, MAX(sales_ymd) AS newest_sales_ymd, MIN(sales_ymd) AS oldest_sales_ymd
    FROM receipt
    GROUP BY customer_id
    HAVING MAX(sales_ymd) <> MIN(sales_ymd)
    LIMIT 10;
- "question": |-
    ---
    > S-027: レシート明細データ（receipt）に対し、店舗コード（store_cd）ごとに売上金額（amount）の平均を計算し、降順でTOP5を表示せよ。
  "answer": |-
    SELECT store_cd, AVG(amount) AS avg_amount
    FROM receipt
    GROUP BY store_cd
    ORDER BY avg_amount DESC
    LIMIT 5;
- "question": |-
    ---
    > S-028: レシート明細データ（receipt）に対し、店舗コード（store_cd）ごとに売上金額（amount）の中央値を計算し、降順でTOP5を表示せよ。
  "answer": |-
    SELECT store_cd, percentile_cont(0.5) WITHIN GROUP (ORDER BY amount) AS median_amount
    FROM receipt
    GROUP BY store_cd
    ORDER BY median_amount DESC
    LIMIT 5;
- "question": |-
    ---
    > S-029: レシート明細データ（receipt）に対し、店舗コード（store_cd）ごとに商品コード（product_cd）の最頻値を求め、10件表示させよ。
  "answer": |-
    SELECT store_cd, product_cd, COUNT(*) AS frequency
    FROM receipt
    GROUP BY store_cd, product_cd
    ORDER BY store_cd, frequency DESC
    LIMIT 10;
- "question": |-
    ---
    > S-030: レシート明細データ（receipt）に対し、店舗コード（store_cd）ごとに売上金額（amount）の分散を計算し、降順で5件表示せよ。
  "answer": |-
    SELECT store_cd, VARIANCE(amount) as variance_amount
    FROM receipt
    GROUP BY store_cd
    ORDER BY variance_amount DESC
    LIMIT 5;
- "question": |-
    ---
    > S-031: レシート明細データ（receipt）に対し、店舗コード（store_cd）ごとに売上金額（amount）の標準偏差を計算し、降順で5件表示せよ。
  "answer": |-
    SELECT store_cd, STDDEV(amount) AS std_dev
    FROM receipt
    GROUP BY store_cd
    ORDER BY std_dev DESC
    LIMIT 5;
- "question": |-
    ---
    > S-032: レシート明細データ（receipt）の売上金額（amount）について、25％刻みでパーセンタイル値を求めよ。
  "answer": |-
    SELECT percentile_disc(0.25) WITHIN GROUP (ORDER BY amount) AS "25th Percentile",
           percentile_disc(0.50) WITHIN GROUP (ORDER BY amount) AS "50th Percentile",
           percentile_disc(0.75) WITHIN GROUP (ORDER BY amount) AS "75th Percentile"
    FROM receipt;
- "question": |-
    ---
    > S-033: レシート明細データ（receipt）に対し、店舗コード（store_cd）ごとに売上金額（amount）の平均を計算し、330以上のものを抽出せよ。
  "answer": |-
    SELECT store_cd, AVG(amount) AS avg_amount
    FROM receipt
    GROUP BY store_cd
    HAVING AVG(amount) >= 330
    ORDER BY avg_amount DESC;
- "question": |-
    ---
    > S-034: レシート明細データ（receipt）に対し、顧客ID（customer_id）ごとに売上金額（amount）を合計して全顧客の平均を求めよ。ただし、顧客IDが"Z"から始まるものは非会員を表すため、除外して計算すること。
  "answer": |-
    SELECT AVG(total_amount) 
    FROM (
      SELECT customer_id, SUM(amount) AS total_amount 
      FROM receipt 
      WHERE customer_id NOT LIKE 'Z%' 
      GROUP BY customer_id
    ) AS subquery
- "question": |-
    ---
    > S-035: レシート明細データ（receipt）に対し、顧客ID（customer_id）ごとに売上金額（amount）を合計して全顧客の平均を求め、平均以上に買い物をしている顧客を抽出し、10件表示せよ。ただし、顧客IDが"Z"から始まるものは非会員を表すため、除外して計算すること。
  "answer": |-
    SELECT customer_id, SUM(amount) AS total_sales
    FROM receipt
    WHERE customer_id NOT LIKE 'Z%'
    GROUP BY customer_id
    HAVING AVG(amount) >= (SELECT AVG(total_sales) FROM (SELECT customer_id, SUM(amount) AS total_sales FROM receipt WHERE customer_id NOT LIKE 'Z%' GROUP BY customer_id) AS sales_by_customer)
    ORDER BY total_sales DESC
    LIMIT 10;
- "question": |-
    ---
    > S-036: レシート明細データ（receipt）と店舗データ（store）を内部結合し、レシート明細データの全項目と店舗データの店舗名（store_name）を10件表示せよ。
  "answer": |-
    SELECT receipt.*, store.store_name
    FROM receipt
    INNER JOIN store ON receipt.store_cd = store.store_cd
    LIMIT 10;
- "question": |-
    ---
    > S-037: 商品データ（product）とカテゴリデータ（category）を内部結合し、商品データの全項目とカテゴリデータのカテゴリ小区分名（category_small_name）を10件表示せよ。
  "answer": |-
    SELECT product.*, category.category_small_name
    FROM product
    INNER JOIN category ON product.category_id = category.category_id
    LIMIT 10;
- "question": |-
    ---
    > S-038: 顧客データ（customer）とレシート明細データ（receipt）から、顧客ごとの売上金額合計を求め、10件表示せよ。ただし、売上実績がない顧客については売上金額を0として表示させること。また、顧客は性別コード（gender_cd）が女性（1）であるものを対象とし、非会員（顧客IDが"Z"から始まるもの）は除外すること。
  "answer": |-
    SELECT c.customer_id, COALESCE(SUM(r.amount), 0) AS total_sales
    FROM customer c
    LEFT JOIN receipt r ON c.customer_id = r.customer_id
    WHERE c.gender_cd = '1' AND c.customer_id NOT LIKE 'Z%'
    GROUP BY c.customer_id
    ORDER BY total_sales DESC
    LIMIT 10;
- "question": |-
    ---
    > S-039: レシート明細データ（receipt）から、売上日数の多い顧客の上位20件を抽出したデータと、売上金額合計の多い顧客の上位20件を抽出したデータをそれぞれ作成し、さらにその2つを完全外部結合せよ。ただし、非会員（顧客IDが"Z"から始まるもの）は除外すること。
  "answer": |
    SELECT r.customer_id, COUNT(DISTINCT r.sales_date) AS sales_days, SUM(r.amount) AS total_sales
    FROM receipt r
    WHERE r.customer_id NOT LIKE 'Z%'
    GROUP BY r.customer_id
    ORDER BY sales_days DESC
    LIMIT 20;

    SELECT r.customer_id, COUNT(DISTINCT r.sales_date) AS sales_days, SUM(r.amount) AS total_sales
    FROM receipt r
    WHERE r.customer_id NOT LIKE 'Z%'
    GROUP BY r.customer_id
    ORDER BY total_sales DESC
    LIMIT 20;

    SELECT s.customer_id, s.sales_days, s.total_sales, t.sales_days, t.total_sales
    FROM (
      SELECT r.customer_id, COUNT(DISTINCT r.sales_date) AS sales_days, SUM(r.amount) AS total_sales
      FROM receipt r
      WHERE r.customer_id NOT LIKE 'Z%'
      GROUP BY r.customer_id
      ORDER BY sales_days DESC
      LIMIT 20
    ) s
    FULL OUTER JOIN (
      SELECT r.customer_id, COUNT(DISTINCT r.sales_date) AS sales_days, SUM(r.amount) AS total_sales
      FROM receipt r
      WHERE r.customer_id NOT LIKE 'Z%'
      GROUP BY r.customer_id
      ORDER BY total_sales DESC
      LIMIT 20
    ) t ON s.customer_id = t.customer_id;
- "question": |-
    ---
    > S-040: 全ての店舗と全ての商品を組み合わせたデータを作成したい。店舗データ（store）と商品データ（product）を直積し、件数を計算せよ。
  "answer": |-
    SELECT COUNT(*) FROM store, product;
- "question": |-
    ---
    > S-041: レシート明細データ（receipt）の売上金額（amount）を日付（sales_ymd）ごとに集計し、前回売上があった日からの売上金額増減を計算せよ。そして結果を10件表示せよ。
  "answer": |-
    SELECT sales_ymd, SUM(amount) as total_sales, 
           SUM(amount) - LAG(SUM(amount), 1, 0) OVER (ORDER BY sales_ymd) as sales_increase
    FROM receipt
    GROUP BY sales_ymd
    ORDER BY sales_ymd DESC
    LIMIT 10;
- "question": |-
    ---
    > S-042: レシート明細データ（receipt）の売上金額（amount）を日付（sales_ymd）ごとに集計し、各日付のデータに対し、前回、前々回、3回前に売上があった日のデータを結合せよ。そして結果を10件表示せよ。
  "answer": |-
    SELECT 
        r.sales_ymd, 
        SUM(r.amount) AS total_sales, 
        LAG(SUM(r.amount), 1) OVER (ORDER BY r.sales_ymd) AS prev_sales, 
        LAG(SUM(r.amount), 2) OVER (ORDER BY r.sales_ymd) AS prev_prev_sales, 
        LAG(SUM(r.amount), 3) OVER (ORDER BY r.sales_ymd) AS prev_3_sales 
    FROM 
        receipt r 
    WHERE 
        EXISTS (
            SELECT 
                1 
            FROM 
                receipt r2 
            WHERE 
                r.sales_ymd > r2.sales_ymd 
                AND r2.sales_ymd > r.sales_ymd - 4
        ) 
    GROUP BY 
        r.sales_ymd 
    ORDER BY 
        r.sales_ymd DESC 
    LIMIT 
        10;
- "question": |-
    ---
    > S-043: レシート明細データ（receipt）と顧客データ（customer）を結合し、性別コード（gender_cd）と年代（ageから計算）ごとに売上金額（amount）を合計した売上サマリデータを作成せよ。性別コードは0が男性、1が女性、9が不明を表すものとする。
    >
    > ただし、項目構成は年代、女性の売上金額、男性の売上金額、性別不明の売上金額の4項目とすること（縦に年代、横に性別のクロス集計）。また、年代は10歳ごとの階級とすること。
  "answer": |-
    SELECT 
      CASE 
        WHEN age < 20 THEN '10代未満' 
        WHEN age < 30 THEN '20代' 
        WHEN age < 40 THEN '30代' 
        WHEN age < 50 THEN '40代' 
        WHEN age < 60 THEN '50代' 
        WHEN age < 70 THEN '60代' 
        ELSE '70代以上' 
      END AS 年代, 
      SUM(CASE WHEN gender_cd = 1 THEN amount ELSE 0 END) AS 女性の売上金額, 
      SUM(CASE WHEN gender_cd = 0 THEN amount ELSE 0 END) AS 男性の売上金額, 
      SUM(CASE WHEN gender_cd = 9 THEN amount ELSE 0 END) AS 性別不明の売上金額 
    FROM 
      receipt 
      JOIN customer ON receipt.customer_id = customer.customer_id 
    GROUP BY 
      年代 
    ORDER BY 
      年代
- "question": |-
    ---
    > S-044: 043で作成した売上サマリデータ（sales_summary）は性別の売上を横持ちさせたものであった。このデータから性別を縦持ちさせ、年代、性別コード、売上金額の3項目に変換せよ。ただし、性別コードは男性を"00"、女性を"01"、不明を"99"とする。
  "answer": |-
    SELECT age, 
           CASE WHEN gender = '男性' THEN '00'
                WHEN gender = '女性' THEN '01'
                ELSE '99' END AS gender_code, 
           sales_amount 
    FROM sales_summary 
    ORDER BY age, gender_code
- "question": |-
    ---
    > S-045: 顧客データ（customer）の生年月日（birth_day）は日付型でデータを保有している。これをYYYYMMDD形式の文字列に変換し、顧客ID（customer_id）とともに10件表示せよ。
  "answer": |-
    SELECT customer_id, TO_CHAR(birth_day, 'YYYYMMDD') FROM customer LIMIT 10;
- "question": |-
    ---
    > S-046: 顧客データ（customer）の申し込み日（application_date）はYYYYMMDD形式の文字列型でデータを保有している。これを日付型に変換し、顧客ID（customer_id）とともに10件表示せよ。
  "answer": |-
    SELECT customer_id, TO_DATE(application_date, 'YYYYMMDD') AS application_date
    FROM customer
    LIMIT 10;
- "question": |-
    ---
    > S-047: レシート明細データ（receipt）の売上日（sales_ymd）はYYYYMMDD形式の数値型でデータを保有している。これを日付型に変換し、レシート番号(receipt_no)、レシートサブ番号（receipt_sub_no）とともに10件表示せよ。
  "answer": |-
    SELECT TO_DATE(sales_ymd::text, 'YYYYMMDD') AS sales_date, receipt_no, receipt_sub_no
    FROM receipt
    LIMIT 10;
- "question": |-
    ---
    > S-048: レシート明細データ（receipt）の売上エポック秒（sales_epoch）は数値型のUNIX秒でデータを保有している。これを日付型に変換し、レシート番号(receipt_no)、レシートサブ番号（receipt_sub_no）とともに10件表示せよ。
  "answer": |-
    SELECT receipt_no, receipt_sub_no, to_timestamp(sales_epoch) AS sales_date
    FROM receipt
    LIMIT 10;
- "question": |-
    ---
    > S-049: レシート明細データ（receipt）の売上エポック秒（sales_epoch）を日付型に変換し、「年」だけ取り出してレシート番号(receipt_no)、レシートサブ番号（receipt_sub_no）とともに10件表示せよ。
  "answer": |-
    SELECT receipt_no, receipt_sub_no, date_trunc('year', to_timestamp(sales_epoch)) as year
    FROM receipt
    LIMIT 10;
- "question": |-
    ---
    > S-050: レシート明細データ（receipt）の売上エポック秒（sales_epoch）を日付型に変換し、「月」だけ取り出してレシート番号(receipt_no)、レシートサブ番号（receipt_sub_no）とともに10件表示せよ。なお、「月」は0埋め2桁で取り出すこと。
  "answer": |-
    SELECT receipt_no, receipt_sub_no, to_char(to_timestamp(sales_epoch), 'MM') as month
    FROM receipt
    ORDER BY sales_epoch DESC
    LIMIT 10;
- "question": |-
    ---
    > S-051: レシート明細データ（receipt）の売上エポック秒を日付型に変換し、「日」だけ取り出してレシート番号(receipt_no)、レシートサブ番号（receipt_sub_no）とともに10件表示せよ。なお、「日」は0埋め2桁で取り出すこと。
  "answer": |-
    SELECT receipt_no, receipt_sub_no, to_char(to_timestamp(sales_epoch_second), 'DD') as day
    FROM receipt
    ORDER BY sales_epoch_second DESC
    LIMIT 10;
- "question": |-
    ---
    > S-052: レシート明細データ（receipt）の売上金額（amount）を顧客ID（customer_id）ごとに合計の上、売上金額合計に対して2,000円以下を0、2,000円より大きい金額を1に二値化し、顧客ID、売上金額合計とともに10件表示せよ。ただし、顧客IDが"Z"から始まるのものは非会員を表すため、除外して計算すること。
  "answer": |-
    SELECT 
        CASE WHEN SUM(amount) <= 2000 THEN 0 ELSE 1 END AS binary_amount,
        customer_id,
        SUM(amount) AS total_amount
    FROM 
        receipt
    WHERE 
        customer_id NOT LIKE 'Z%'
    GROUP BY 
        customer_id
    ORDER BY 
        total_amount DESC
    LIMIT 10
- "question": |-
    ---
    > S-053: 顧客データ（customer）の郵便番号（postal_cd）に対し、東京（先頭3桁が100〜209のもの）を1、それ以外のものを0に二値化せよ。さらにレシート明細データ（receipt）と結合し、全期間において売上実績のある顧客数を、作成した二値ごとにカウントせよ。
  "answer": |-
    SELECT 
        CASE 
            WHEN SUBSTRING(c.postal_cd, 1, 3) BETWEEN '100' AND '209' THEN 1 
            ELSE 0 
        END AS tokyo_flag, 
        COUNT(DISTINCT r.customer_id) AS customer_count 
    FROM 
        customer c 
        LEFT JOIN receipt r ON c.customer_id = r.customer_id 
    WHERE 
        r.sales_amount IS NOT NULL 
    GROUP BY 
        tokyo_flag 
    ORDER BY 
        tokyo_flag ASC
- "question": |-
    ---
    > S-054: 顧客データ（customer）の住所（address）は、埼玉県、千葉県、東京都、神奈川県のいずれかとなっている。都道府県毎にコード値を作成し、顧客ID、住所とともに10件表示せよ。値は埼玉県を11、千葉県を12、東京都を13、神奈川県を14とすること。
  "answer": |-
    SELECT customer.customer_id, customer.address, 
    CASE 
        WHEN customer.address LIKE '%埼玉県%' THEN 11 
        WHEN customer.address LIKE '%千葉県%' THEN 12 
        WHEN customer.address LIKE '%東京都%' THEN 13 
        WHEN customer.address LIKE '%神奈川県%' THEN 14 
    END AS prefecture_code 
    FROM customer 
    LIMIT 10;
- "question": |-
    ---
    > S-055: レシート明細（receipt）データの売上金額（amount）を顧客ID（customer_id）ごとに合計し、その合計金額の四分位点を求めよ。その上で、顧客ごとの売上金額合計に対して以下の基準でカテゴリ値を作成し、顧客ID、売上金額合計とともに10件表示せよ。カテゴリ値は順に1〜4とする。
    >
    > - 最小値以上第1四分位未満 ・・・ 1を付与
    > - 第1四分位以上第2四分位未満 ・・・ 2を付与
    > - 第2四分位以上第3四分位未満 ・・・ 3を付与
    > - 第3四分位以上 ・・・ 4を付与
  "answer": |-
    SELECT r.customer_id, SUM(r.amount) as total_amount, NTILE(4) OVER (ORDER BY SUM(r.amount)) as category
    FROM receipt r
    GROUP BY r.customer_id
    ORDER BY total_amount DESC
    LIMIT 10;
- "question": |-
    ---
    > S-056: 顧客データ（customer）の年齢（age）をもとに10歳刻みで年代を算出し、顧客ID（customer_id）、生年月日（birth_day）とともに10件表示せよ。ただし、60歳以上は全て60歳代とすること。年代を表すカテゴリ名は任意とする。
  "answer": |-
    SELECT customer_id, birth_day, 
    CASE 
        WHEN age < 60 THEN (age/10)*10 || '代'
        ELSE '60代'
    END AS age_group
    FROM customer
    LIMIT 10;
- "question": |-
    ---
    > S-057: 056の抽出結果と性別コード（gender_cd）により、新たに性別×年代の組み合わせを表すカテゴリデータを作成し、10件表示せよ。組み合わせを表すカテゴリの値は任意とする。
  "answer": |-
    SELECT CONCAT(gender_cd, '_', FLOOR((EXTRACT(YEAR FROM age(current_date, birthday)))/10)*10) AS category, COUNT(*) 
    FROM customer 
    WHERE customer_id IN (SELECT customer_id FROM rental WHERE inventory_id IN (SELECT inventory_id FROM inventory WHERE film_id = 56)) 
    GROUP BY category 
    ORDER BY COUNT(*) DESC 
    LIMIT 10;
- "question": |-
    ---
    > S-058: 顧客データ（customer）の性別コード（gender_cd）をダミー変数化し、顧客ID（customer_id）とともに10件表示せよ。
  "answer": |-
    SELECT customer_id, 
           CASE WHEN gender_cd = 'F' THEN 1 ELSE 0 END AS female_dummy, 
           CASE WHEN gender_cd = 'M' THEN 1 ELSE 0 END AS male_dummy 
    FROM customer 
    LIMIT 10;
- "question": |-
    ---
    > S-059: レシート明細データ（receipt）の売上金額（amount）を顧客ID（customer_id）ごとに合計し、売上金額合計を平均0、標準偏差1に標準化して顧客ID、売上金額合計とともに10件表示せよ。標準化に使用する標準偏差は、分散の平方根、もしくは不偏分散の平方根のどちらでも良いものとする。ただし、顧客IDが"Z"から始まるのものは非会員を表すため、除外して計算すること。
  "answer": |-
    SELECT r.customer_id, 
           (SUM(r.amount) - AVG(SUM(r.amount)) OVER ()) / STDDEV_POP(SUM(r.amount)) OVER () AS standardized_sales_total
    FROM receipt r
    JOIN customer c ON r.customer_id = c.customer_id
    WHERE c.customer_id NOT LIKE 'Z%'
    GROUP BY r.customer_id
    ORDER BY standardized_sales_total DESC
    LIMIT 10;
- "question": |-
    ---
    > S-060: レシート明細データ（receipt）の売上金額（amount）を顧客ID（customer_id）ごとに合計し、売上金額合計を最小値0、最大値1に正規化して顧客ID、売上金額合計とともに10件表示せよ。ただし、顧客IDが"Z"から始まるのものは非会員を表すため、除外して計算すること。
  "answer": |-
    SELECT 
        customer_id, 
        (SUM(amount) - MIN(amount)) / (MAX(amount) - MIN(amount)) AS normalized_sales 
    FROM 
        receipt 
    WHERE 
        customer_id NOT LIKE 'Z%' 
    GROUP BY 
        customer_id 
    ORDER BY 
        normalized_sales DESC 
    LIMIT 
        10
- "question": |-
    ---
    > S-061: レシート明細データ（receipt）の売上金額（amount）を顧客ID（customer_id）ごとに合計し、売上金額合計を常用対数化（底10）して顧客ID、売上金額合計とともに10件表示せよ。ただし、顧客IDが"Z"から始まるのものは非会員を表すため、除外して計算すること。
  "answer": |-
    SELECT customer_id, LOG(SUM(amount)) as total_sales
    FROM receipt
    WHERE customer_id NOT LIKE 'Z%'
    GROUP BY customer_id
    ORDER BY total_sales DESC
    LIMIT 10;
- "question": |-
    ---
    > S-062: レシート明細データ（receipt）の売上金額（amount）を顧客ID（customer_id）ごとに合計し、売上金額合計を自然対数化（底e）して顧客ID、売上金額合計とともに10件表示せよ。ただし、顧客IDが"Z"から始まるのものは非会員を表すため、除外して計算すること。
  "answer": |-
    SELECT customer_id, ln(sum(amount)) as total_sales
    FROM receipt
    WHERE customer_id NOT LIKE 'Z%'
    GROUP BY customer_id
    ORDER BY total_sales DESC
    LIMIT 10;
- "question": |-
    ---
    > S-063: 商品データ（product）の単価（unit_price）と原価（unit_cost）から各商品の利益額を算出し、結果を10件表示せよ。
  "answer": |-
    SELECT product_name, unit_price - unit_cost AS profit
    FROM product
    ORDER BY profit DESC
    LIMIT 10;
- "question": |-
    ---
    > S-064: 商品データ（product）の単価（unit_price）と原価（unit_cost）から、各商品の利益率の全体平均を算出せよ。ただし、単価と原価には欠損が生じていることに注意せよ。
  "answer": |-
    SELECT AVG((unit_price - unit_cost) / unit_cost) AS average_profit_rate
    FROM product
    WHERE unit_price IS NOT NULL AND unit_cost IS NOT NULL
- "question": |-
    ---
    > S-065: 商品データ（product）の各商品について、利益率が30%となる新たな単価を求めよ。ただし、1円未満は切り捨てること。そして結果を10件表示させ、利益率がおよそ30％付近であることを確認せよ。ただし、単価（unit_price）と原価（unit_cost）には欠損が生じていることに注意せよ。
  "answer": |-
    SELECT product_id, product_name, FLOOR(unit_cost * 1.43) AS new_unit_price, (FLOOR(unit_cost * 1.43) - unit_cost) / FLOOR(unit_cost * 1.43) AS profit_margin
    FROM product
    WHERE unit_cost IS NOT NULL AND unit_price IS NOT NULL
    ORDER BY ABS((FLOOR(unit_cost * 1.43) - unit_cost) / FLOOR(unit_cost * 1.43) - 0.3) ASC
    LIMIT 10;
- "question": |-
    ---
    > S-066: 商品データ（product）の各商品について、利益率が30%となる新たな単価を求めよ。今回は、1円未満を丸めること（四捨五入または偶数への丸めで良い）。そして結果を10件表示させ、利益率がおよそ30％付近であることを確認せよ。ただし、単価（unit_price）と原価（unit_cost）には欠損が生じていることに注意せよ。
  "answer": |-
    SELECT product_id, product_name, ROUND((unit_cost * 1.3) / 10) * 10 AS new_unit_price, ROUND(((new_unit_price - unit_cost) / new_unit_price) * 100, 2) AS profit_margin
    FROM product
    WHERE unit_cost IS NOT NULL AND unit_price IS NULL
    ORDER BY ABS(profit_margin - 30)
    LIMIT 10;
- "question": |-
    ---
    > S-067: 商品データ（product）の各商品について、利益率が30%となる新たな単価を求めよ。今回は、1円未満を切り上げること。そして結果を10件表示させ、利益率がおよそ30％付近であることを確認せよ。ただし、単価（unit_price）と原価（unit_cost）には欠損が生じていることに注意せよ。
  "answer": |-
    SELECT product_id, product_name, unit_price, unit_cost, 
    CEILING(unit_cost / 0.7) AS new_unit_price, 
    ROUND(((CEILING(unit_cost / 0.7) - unit_cost) / CEILING(unit_cost / 0.7)) * 100, 2) AS profit_margin 
    FROM product 
    WHERE unit_cost IS NOT NULL AND unit_price IS NOT NULL 
    ORDER BY profit_margin DESC 
    LIMIT 10;
- "question": |-
    ---
    > S-068: 商品データ（product）の各商品について、消費税率10％の税込み金額を求めよ。1円未満の端数は切り捨てとし、結果を10件表示せよ。ただし、単価（unit_price）には欠損が生じていることに注意せよ。
  "answer": |-
    SELECT product_id, product_name, floor(unit_price * 1.1) as tax_included_price
    FROM product
    WHERE unit_price IS NOT NULL
    ORDER BY product_id
    LIMIT 10;
- "question": |-
    ---
    > S-069: レシート明細データ（receipt）と商品データ（product）を結合し、顧客毎に全商品の売上金額合計と、カテゴリ大区分コード（category_major_cd）が"07"（瓶詰缶詰）の売上金額合計を計算の上、両者の比率を求めよ。抽出対象はカテゴリ大区分コード"07"（瓶詰缶詰）の売上実績がある顧客のみとし、結果を10件表示せよ。
  "answer": |-
    SELECT 
        receipt.customer_id, 
        SUM(receipt.amount * product.price) AS total_sales, 
        SUM(CASE WHEN product.category_major_cd = '07' THEN receipt.amount * product.price ELSE 0 END) AS category_sales
    FROM 
        receipt 
        JOIN product ON receipt.product_cd = product.product_cd 
    WHERE 
        product.category_major_cd = '07' 
    GROUP BY 
        receipt.customer_id 
    HAVING 
        SUM(CASE WHEN product.category_major_cd = '07' THEN receipt.amount ELSE 0 END) > 0 
    ORDER BY 
        total_sales DESC 
    LIMIT 
        10
- "question": |-
    ---
    > S-070: レシート明細データ（receipt）の売上日（sales_ymd）に対し、顧客データ（customer）の会員申込日（application_date）からの経過日数を計算し、顧客ID（customer_id）、売上日、会員申込日とともに10件表示せよ（sales_ymdは数値、application_dateは文字列でデータを保持している点に注意）。
  "answer": |-
    SELECT r.customer_id, r.sales_ymd, c.application_date, 
           DATE_PART('day', r.sales_ymd::timestamp - c.application_date::timestamp) AS days_since_application
    FROM receipt AS r
    JOIN customer AS c ON r.customer_id = c.customer_id
    ORDER BY r.sales_ymd DESC
    LIMIT 10;
- "question": |-
    ---
    > S-071: レシート明細データ（receipt）の売上日（sales_ymd）に対し、顧客データ（customer）の会員申込日（application_date）からの経過月数を計算し、顧客ID（customer_id）、売上日、会員申込日とともに10件表示せよ（sales_ymdは数値、application_dateは文字列でデータを保持している点に注意）。1ヶ月未満は切り捨てること。
  "answer": |-
    SELECT 
        r.customer_id, 
        r.sales_ymd, 
        c.application_date, 
        DATE_PART('year', AGE(r.sales_ymd::date, c.application_date::date)) * 12 + 
        DATE_PART('month', AGE(r.sales_ymd::date, c.application_date::date)) AS elapsed_months
    FROM 
        receipt AS r 
        JOIN customer AS c ON r.customer_id = c.customer_id 
    ORDER BY 
        elapsed_months DESC 
    LIMIT 
        10;
- "question": |-
    ---
    > S-072: レシート明細データ（receipt）の売上日（sales_ymd）に対し、顧客データ（customer）の会員申込日（application_date）からの経過年数を計算し、顧客ID（customer_id）、売上日、会員申込日とともに10件表示せよ（sales_ymdは数値、application_dateは文字列でデータを保持している点に注意）。1年未満は切り捨てること。
  "answer": |-
    SELECT 
        r.customer_id, 
        r.sales_ymd, 
        c.application_date, 
        DATE_PART('year', AGE(r.sales_ymd::date, c.application_date::date)) AS elapsed_years
    FROM 
        receipt r 
        JOIN customer c ON r.customer_id = c.customer_id 
    ORDER BY 
        r.sales_ymd DESC 
    LIMIT 
        10;
- "question": |-
    ---
    > S-073: レシート明細データ（receipt）の売上日（sales_ymd）に対し、顧客データ（customer）の会員申込日（application_date）からのエポック秒による経過時間を計算し、顧客ID（customer_id）、売上日、会員申込日とともに10件表示せよ（なお、sales_ymdは数値、application_dateは文字列でデータを保持している点に注意）。なお、時間情報は保有していないため各日付は0時0分0秒を表すものとする。
  "answer": |-
    SELECT r.customer_id, r.sales_ymd, c.application_date, 
           EXTRACT(EPOCH FROM (TO_TIMESTAMP(c.application_date, 'YYYYMMDD') - 
                               TO_TIMESTAMP(r.sales_ymd::text, 'YYYYMMDD'))) AS elapsed_time
    FROM receipt AS r
    JOIN customer AS c ON r.customer_id = c.customer_id
    ORDER BY elapsed_time DESC
    LIMIT 10;
- "question": |-
    ---
    > S-074: レシート明細データ（receipt）の売上日（sales_ymd）に対し、当該週の月曜日からの経過日数を計算し、売上日、直前の月曜日付とともに10件表示せよ（sales_ymdは数値でデータを保持している点に注意）。
  "answer": |-
    SELECT sales_ymd, DATE_PART('day', sales_ymd::date - (sales_ymd::date - EXTRACT(DOW FROM sales_ymd::date)::integer + 1)::date) as days_since_monday, (sales_ymd::date - EXTRACT(DOW FROM sales_ymd::date)::integer + 1)::date as monday_date
    FROM receipt
    ORDER BY sales_ymd DESC
    LIMIT 10;
- "question": |-
    ---
    > S-075: 顧客データ（customer）からランダムに1%のデータを抽出し、先頭から10件表示せよ。
  "answer": |-
    SELECT * FROM customer TABLESAMPLE SYSTEM (1) LIMIT 10;
- "question": |-
    ---
    > S-076: 顧客データ（customer）から性別コード（gender_cd）の割合に基づきランダムに10%のデータを層化抽出し、性別コードごとに件数を集計せよ。
  "answer": |-
    SELECT gender_cd, COUNT(*) 
    FROM (
      SELECT *, NTILE(10) OVER (PARTITION BY gender_cd ORDER BY RANDOM()) AS ntile
      FROM customer
    ) AS sub
    WHERE ntile = 1
    GROUP BY gender_cd
- "question": |-
    ---
    > S-077: レシート明細データ（receipt）の売上金額を顧客単位に合計し、合計した売上金額の外れ値を抽出せよ。なお、外れ値は売上金額合計を対数化したうえで平均と標準偏差を計算し、その平均から3σを超えて離れたものとする（自然対数と常用対数のどちらでも可）。結果は10件表示せよ。
  "answer": |-
    SELECT customer_id, SUM(sales_amount) as total_sales
    FROM receipt
    GROUP BY customer_id
    HAVING total_sales > (SELECT AVG(ln(total_sales)) + 3*STDDEV(ln(total_sales)) FROM (SELECT SUM(sales_amount) as total_sales FROM receipt GROUP BY customer_id) as subquery)
    ORDER BY total_sales DESC
    LIMIT 10;
- "question": |-
    ---
    > S-078: レシート明細データ（receipt）の売上金額（amount）を顧客単位に合計し、合計した売上金額の外れ値を抽出せよ。ただし、顧客IDが"Z"から始まるのものは非会員を表すため、除外して計算すること。なお、ここでは外れ値を第1四分位と第3四分位の差であるIQRを用いて、「第1四分位数-1.5×IQR」を下回るもの、または「第3四分位数+1.5×IQR」を超えるものとする。結果は10件表示せよ。
  "answer": |-
    SELECT customer_id, SUM(amount) as total_sales
    FROM receipt
    WHERE customer_id NOT LIKE 'Z%'
    GROUP BY customer_id
    HAVING total_sales < (SELECT percentile_cont(0.25) WITHIN GROUP (ORDER BY total_sales) FROM (SELECT customer_id, SUM(amount) as total_sales FROM receipt WHERE customer_id NOT LIKE 'Z%' GROUP BY customer_id) as subquery) - 1.5 * (SELECT percentile_cont(0.75) WITHIN GROUP (ORDER BY total_sales) FROM (SELECT customer_id, SUM(amount) as total_sales FROM receipt WHERE customer_id NOT LIKE 'Z%' GROUP BY customer_id) as subquery) OR total_sales > (SELECT percentile_cont(0.75) WITHIN GROUP (ORDER BY total_sales) FROM (SELECT customer_id, SUM(amount) as total_sales FROM receipt WHERE customer_id NOT LIKE 'Z%' GROUP BY customer_id) as subquery) + 1.5 * (SELECT percentile_cont(0.75) WITHIN GROUP (ORDER BY total_sales) FROM (SELECT customer_id, SUM(amount) as total_sales FROM receipt WHERE customer_id NOT LIKE 'Z%' GROUP BY customer_id) as subquery)
    ORDER BY total_sales DESC
    LIMIT 10;
- "question": |-
    ---
    > S-079: 商品データ（product）の各項目に対し、欠損数を確認せよ。
  "answer": |-
    SELECT 
        COUNT(*) - COUNT(product_id) AS missing_product_id,
        COUNT(*) - COUNT(product_name) AS missing_product_name,
        COUNT(*) - COUNT(price) AS missing_price,
        COUNT(*) - COUNT(description) AS missing_description,
        COUNT(*) - COUNT(category_id) AS missing_category_id
    FROM 
        product;
- "question": |-
    ---
    > S-080: 商品データ（product）のいずれかの項目に欠損が発生しているレコードを全て削除した新たな商品データを作成せよ。なお、削除前後の件数を表示させ、079で確認した件数だけ減少していることも確認すること。
  "answer": |-
    DELETE FROM product WHERE column_name IS NULL;
    SELECT COUNT(*) FROM product;
- "question": |-
    ---
    > S-081: 単価（unit_price）と原価（unit_cost）の欠損値について、それぞれの平均値で補完した新たな商品データを作成せよ。なお、平均値については1円未満を丸めること（四捨五入または偶数への丸めで良い）。補完実施後、各項目について欠損が生じていないことも確認すること。
  "answer": |
    UPDATE products
    SET unit_price = ROUND(AVG(unit_price), 0), unit_cost = ROUND(AVG(unit_cost), 0)
    WHERE unit_price IS NULL OR unit_cost IS NULL;

    SELECT COUNT(*) FROM products WHERE unit_price IS NULL OR unit_cost IS NULL;
- "question": |-
    ---
    > S-082: 単価（unit_price）と原価（unit_cost）の欠損値について、それぞれの中央値で補完した新たな商品データを作成せよ。なお、中央値については1円未満を丸めること（四捨五入または偶数への丸めで良い）。補完実施後、各項目について欠損が生じていないことも確認すること。
  "answer": |
    UPDATE products
    SET unit_price = ROUND((SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY unit_price) FROM products WHERE unit_price IS NOT NULL), 0),
        unit_cost = ROUND((SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY unit_cost) FROM products WHERE unit_cost IS NOT NULL), 0)
    WHERE unit_price IS NULL OR unit_cost IS NULL;

    SELECT COUNT(*) FROM products WHERE unit_price IS NULL OR unit_cost IS NULL;
- "question": |-
    ---
    > S-083: 単価（unit_price）と原価（unit_cost）の欠損値について、各商品のカテゴリ小区分コード（category_small_cd）ごとに算出した中央値で補完した新たな商品データを作成せよ。なお、中央値については1円未満を丸めること（四捨五入または偶数への丸めで良い）。補完実施後、各項目について欠損が生じていないことも確認すること。
  "answer": |-
    UPDATE product
    SET unit_price = COALESCE(unit_price, ROUND((SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY unit_price) FROM product WHERE category_small_cd = product.category_small_cd AND unit_price IS NOT NULL), 0)),
        unit_cost = COALESCE(unit_cost, ROUND((SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY unit_cost) FROM product WHERE category_small_cd = product.category_small_cd AND unit_cost IS NOT NULL), 0))
    WHERE unit_price IS NULL OR unit_cost IS NULL;

    SELECT COUNT(*) FROM product WHERE unit_price IS NULL OR unit_cost IS NULL;
- "question": |-
    ---
    > S-084: 顧客データ（customer）の全顧客に対して全期間の売上金額に占める2019年売上金額の割合を計算し、新たなデータを作成せよ。ただし、売上実績がない場合は0として扱うこと。そして計算した割合が0超のものを抽出し、結果を10件表示せよ。また、作成したデータに欠損が存在しないことを確認せよ。
  "answer": |-
    SELECT c.customer_id, COALESCE(SUM(s.sales_amount), 0) / COALESCE(SUM(CASE WHEN s.sales_date BETWEEN '2019-01-01' AND '2019-12-31' THEN s.sales_amount ELSE 0 END), 1) AS ratio_2019_sales
    FROM customer c
    LEFT JOIN sales s ON c.customer_id = s.customer_id
    GROUP BY c.customer_id
    HAVING COALESCE(SUM(CASE WHEN s.sales_date BETWEEN '2019-01-01' AND '2019-12-31' THEN s.sales_amount ELSE 0 END), 1) > 0
    ORDER BY ratio_2019_sales DESC
    LIMIT 10;
- "question": |-
    ---
    > S-085: 顧客データ（customer）の全顧客に対し、郵便番号（postal_cd）を用いてジオコードデータ（geocode）を紐付け、新たな顧客データを作成せよ。ただし、1つの郵便番号（postal_cd）に複数の経度（longitude）、緯度（latitude）情報が紐づく場合は、経度（longitude）、緯度（latitude）の平均値を算出して使用すること。また、作成結果を確認するために結果を10件表示せよ。
  "answer": |
    INSERT INTO new_customer (customer_id, postal_cd, longitude, latitude)
    SELECT customer.customer_id, customer.postal_cd, AVG(geocode.longitude), AVG(geocode.latitude)
    FROM customer
    LEFT JOIN geocode ON customer.postal_cd = geocode.postal_cd
    GROUP BY customer.customer_id, customer.postal_cd
    LIMIT 10;
- "question": |-
    ---
    > S-086: 085で作成した緯度経度つき顧客データに対し、会員申込店舗コード（application_store_cd）をキーに店舗データ（store）と結合せよ。そして申込み店舗の緯度（latitude）・経度情報（longitude)と顧客住所（address）の緯度・経度を用いて申込み店舗と顧客住所の距離（単位：km）を求め、顧客ID（customer_id）、顧客住所（address）、店舗住所（address）とともに表示せよ。計算式は以下の簡易式で良いものとするが、その他精度の高い方式を利用したライブラリを利用してもかまわない。結果は10件表示せよ。

    $$
    \mbox{緯度（ラジアン）}：\phi \\
    \mbox{経度（ラジアン）}：\lambda \\
    \mbox{距離}L = 6371 * \arccos(\sin \phi_1 * \sin \phi_2
    + \cos \phi_1 * \cos \phi_2 * \cos(\lambda_1 − \lambda_2))
    $$
  "answer": |-
    SELECT c.customer_id, c.address AS customer_address, s.address AS store_address, 
        6371 * acos(sin(radians(c.latitude)) * sin(radians(s.latitude)) 
        + cos(radians(c.latitude)) * cos(radians(s.latitude)) * cos(radians(c.longitude) - radians(s.longitude))) AS distance
    FROM customer AS c
    JOIN store AS s ON c.application_store_cd = s.store_cd
    ORDER BY distance
    LIMIT 10;
- "question": |-
    ---
    > S-087: 顧客データ（customer）では、異なる店舗での申込みなどにより同一顧客が複数登録されている。名前（customer_name）と郵便番号（postal_cd）が同じ顧客は同一顧客とみなして1顧客1レコードとなるように名寄せした名寄顧客データを作成し、顧客データの件数、名寄顧客データの件数、重複数を算出せよ。ただし、同一顧客に対しては売上金額合計が最も高いものを残し、売上金額合計が同一もしくは売上実績がない顧客については顧客ID（customer_id）の番号が小さいものを残すこととする。
  "answer": |-
    SELECT COUNT(*) AS customer_count, COUNT(DISTINCT customer_name, postal_cd) AS merged_customer_count, COUNT(*) - COUNT(DISTINCT customer_name, postal_cd) AS duplicate_count
    FROM customer
- "question": |-
    ---
    > S-088: 087で作成したデータを元に、顧客データに統合名寄IDを付与したデータを作成せよ。ただし、統合名寄IDは以下の仕様で付与するものとする。
    >
    > - 重複していない顧客：顧客ID（customer_id）を設定
    > - 重複している顧客：前設問で抽出したレコードの顧客IDを設定
    > 
    > 顧客IDのユニーク件数と、統合名寄IDのユニーク件数の差も確認すること。
  "answer": |-
    UPDATE
      customer_data
    SET
      integrated_id = COALESCE(
        (
          SELECT
            customer_id
          FROM
            extracted_data
          WHERE
            extracted_data.customer_name = customer_data.customer_name
            AND extracted_data.customer_kana = customer_data.customer_kana
            AND extracted_data.customer_address = customer_data.customer_address
        ),
        customer_id
      )

    SELECT
      COUNT(DISTINCT customer_id) AS unique_customer_ids,
      COUNT(DISTINCT integrated_id) AS unique_integrated_ids
    FROM
      customer_data
- "question": |-
    ---
    > S-089: 売上実績がある顧客を、予測モデル構築のため学習用データとテスト用データに分割したい。それぞれ8:2の割合でランダムにデータを分割せよ。
  "answer": |-
    SELECT customer_id, SUM(sales_amount) AS total_sales
    FROM sales
    GROUP BY customer_id
    HAVING SUM(sales_amount) IS NOT NULL
    ORDER BY RANDOM()
- "question": |-
    ---
    > S-090: レシート明細データ（receipt）は2017年1月1日〜2019年10月31日までのデータを有している。売上金額（amount）を月次で集計し、学習用に12ヶ月、テスト用に6ヶ月の時系列モデル構築用データを3セット作成せよ。
  "answer": |-
    SELECT DATE_TRUNC('month', date) AS month, SUM(amount) AS total_amount
    FROM receipt
    WHERE date >= '2017-01-01' AND date <= '2019-10-31'
    GROUP BY month
    ORDER BY month ASC
- "question": |-
    ---
    > S-091: 顧客データ（customer）の各顧客に対し、売上実績がある顧客数と売上実績がない顧客数が1:1となるようにアンダーサンプリングで抽出せよ。
  "answer": |-
    SELECT COUNT(*) AS count, CASE WHEN SUM(CASE WHEN o.customer_id IS NULL THEN 0 ELSE 1 END) > 0 THEN 'Yes' ELSE 'No' END AS has_sales
    FROM customer c
    LEFT JOIN orders o ON c.customer_id = o.customer_id
    GROUP BY has_sales
    ORDER BY count DESC
    LIMIT 1;
- "question": |-
    ---
    > S-092: 顧客データ（customer）の性別について、第三正規形へと正規化せよ。
  "answer": |-
    ALTER TABLE customer ADD COLUMN gender_id SERIAL PRIMARY KEY;
    CREATE TABLE gender (
        gender_id SERIAL PRIMARY KEY,
        gender_name VARCHAR(10) NOT NULL
    );
    INSERT INTO gender (gender_name)
    SELECT DISTINCT gender FROM customer;
    ALTER TABLE customer ADD COLUMN gender_id INTEGER REFERENCES gender(gender_id);
    UPDATE customer SET gender_id = gender.gender_id
    FROM gender
    WHERE customer.gender = gender.gender_name;
    ALTER TABLE customer DROP COLUMN gender;
- "question": |-
    ---
    > S-093: 商品データ（product）では各カテゴリのコード値だけを保有し、カテゴリ名は保有していない。カテゴリデータ（category）と組み合わせて非正規化し、カテゴリ名を保有した新たな商品データを作成せよ。
  "answer": |
    UPDATE product
    SET category_name = category.name
    FROM category
    WHERE product.category_code = category.code;
- "question": |-
    ---
    > S-094: 093で作成したカテゴリ名付き商品データを以下の仕様でファイル出力せよ。
    > 
    > |ファイル形式|ヘッダ有無|文字エンコーディング|
    > |:--:|:--:|:--:|
    > |CSV（カンマ区切り）|有り|UTF-8|
    > 
    > ファイル出力先のパスは以下のようにすること（COPYコマンドの権限は付与済み）。
    > 
    > |出力先|
    > |:--:|
    > |/tmp/data|
    > 
    > ※"/tmp/data"を指定することでJupyterの"/work/data"と共有されるようになっている。
  "answer": |-
    COPY (SELECT p.product_id, p.product_name, c.category_name, p.price FROM products p JOIN categories c ON p.category_id = c.category_id) TO '/tmp/data/products_with_categories.csv' WITH CSV HEADER;
- "question": |-
    ---
    > S-095: 093で作成したカテゴリ名付き商品データを以下の仕様でファイル出力せよ。
    > 
    > |ファイル形式|ヘッダ有無|文字エンコーディング|
    > |:--:|:--:|:--:|
    > |CSV（カンマ区切り）|有り|CP932|
    > 
    > PostgreSQLではShift_JISを指定することでCP932相当となる。ファイル出力先のパスは以下のようにすること（COPYコマンドの権限は付与済み）。
    > 
    > |出力先|
    > |:--:|
    > |/tmp/data|
    > 
    > ※"/tmp/data"を指定することでJupyterの"/work/data"と共有されるようになっている。
  "answer": |-
    COPY (SELECT p.product_id, p.product_name, c.category_name FROM products p JOIN categories c ON p.category_id = c.category_id) TO '/tmp/data/product_with_category.csv' WITH CSV HEADER ENCODING 'CP932';
- "question": |-
    ---
    > S-096: 093で作成したカテゴリ名付き商品データを以下の仕様でファイル出力せよ。
    > 
    > |ファイル形式|ヘッダ有無|文字エンコーディング|
    > |:--:|:--:|:--:|
    > |CSV（カンマ区切り）|無し|UTF-8|
    > 
    > ファイル出力先のパスは以下のようにすること（COPYコマンドの権限は付与済み）。
    > 
    > |出力先|
    > |:--:|
    > |/tmp/data|
    > 
    > ※"/tmp/data"を指定することでJupyterの"/work/data"と共有されるようになっている。
  "answer": |-
    COPY product_categories (category_id, category_name, created_at, updated_at) TO '/tmp/data/product_categories.csv' WITH (FORMAT CSV, ENCODING 'UTF-8', HEADER FALSE);
- "question": |-
    ---
    > S-097: 094で作成した以下形式のファイルを読み込み、データを3件を表示させて正しく取り込まれていることを確認せよ。
    > 
    > |ファイル形式|ヘッダ有無|文字エンコーディング|
    > |:--:|:--:|:--:|
    > |CSV（カンマ区切り）|有り|UTF-8|
  "answer": |-
    SELECT * FROM table_name LIMIT 3;
- "question": |-
    ---
    > S-098: 096で作成した以下形式のファイルを読み込み、データを3件を表示させて正しく取り込まれていることを確認せよ。
    > 
    > |ファイル形式|ヘッダ有無|文字エンコーディング|
    > |:--:|:--:|:--:|
    > |CSV（カンマ区切り）|ヘッダ無し|UTF-8|
  "answer": |-
    SELECT * FROM table_name LIMIT 3;
- "question": |
    ---
    > S-099: 093で作成したカテゴリ名付き商品データを以下の仕様でファイル出力せよ。
    > 
    > |ファイル形式|ヘッダ有無|文字エンコーディング|
    > |:--:|:--:|:--:|
    > |TSV（タブ区切り）|有り|UTF-8|
    > 
    > ファイル出力先のパスは以下のようにすること（COPYコマンドの権限は付与済み）。
    > 
    > |出力先|
    > |:--:|
    > |/tmp/data|
    > 
    > ※"/tmp/data"を指定することでJupyterの"/work/data"と共有されるようになっている。
  "answer": |-
    COPY (SELECT p.product_id, p.product_name, c.category_name FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.product_id LIKE '093%') TO '/tmp/data/products.tsv' WITH (FORMAT 'csv', DELIMITER E'\t', HEADER);
- "question": |-
    ---
    > S-100: 099で作成した以下形式のファイルを読み込み、データを3件を表示させて正しく取り込まれていることを確認せよ。
    > 
    > |ファイル形式|ヘッダ有無|文字エンコーディング|
    > |:--:|:--:|:--:|
    > |TSV（タブ区切り）|有り|UTF-8|
  "answer": |-
    SELECT * FROM table_name LIMIT 3;
